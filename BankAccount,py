'''Getter and Setters
Project: Bank Account Simulation

Description: Simulate basic bank account operations.
Features:Class BankAccount with private attributes for balance.
Getter and setter methods to access and modify the balance.
Methods to deposit and withdraw money.'''

class BankAccount:
    def __init__(self, account_holder, initial_balance=0):
        self.account_holder = account_holder
        self._balance = initial_balance

    def getBalance(self):
        return self._balance

    def setBalance(self, amount):
        if amount < 0:
            print("Balance cannot be negative.")
        else:
            self._balance = amount

    def deposit(self, amount):
        if amount > 0:
            self._balance += amount
            print(f"Amount Deposited '{amount}'.\nNew balance is {self._balance}.")
        else:
            print("Deposit amount must be positive.")

    def withdraw(self, amount):
        if amount > self._balance:
            print("Insufficient funds.")
        elif amount <= 0:
            print("Withdrawal amount must be positive.")
        else:
            self._balance -= amount
            print(f"Withdrew {amount}. New balance is {self._balance}.")

    def __str__(self):
        return f"\nAccount holder: {self.account_holder} || Balance: {self._balance}"


account = BankAccount("Sanjay", 1000)

print(account)  

account.deposit(500)
print("The Current Balance in Account is : ", account.getBalance())  

account.withdraw(200)
print(account.getBalance())

account.setBalance(2000)  
print(account.getBalance()) 

account.setBalance(-100)  # Trying to set a negative balance
